name: Build PirateWallet-Lite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Fix set-output deprecation warnings
  GITHUB_ACTIONS_DEPRECATION_WARNINGS: false

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Install libsodium via vcpkg
        shell: cmd
        run: |
          mkdir %USERPROFILE%\vcpkg
          cd %USERPROFILE%\vcpkg
          git clone https://github.com/microsoft/vcpkg .
          .\bootstrap-vcpkg.bat
          .\vcpkg install libsodium:x64-windows-static
          
          REM Create directories that might be expected by the build
          mkdir D:\a\PirateWallet-Lite\PirateWallet-Lite\res\libs
          mkdir D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\lib
          mkdir D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\include
          
          REM Copy libraries from vcpkg to expected locations - log everything for debugging
          echo Copying libraries from vcpkg to expected locations
          dir %USERPROFILE%\vcpkg\installed\x64-windows-static\lib
          type %USERPROFILE%\vcpkg\installed\x64-windows-static\lib\libsodium.lib > D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\lib\libsodium.a
          type %USERPROFILE%\vcpkg\installed\x64-windows-static\lib\libsodium.lib > D:\a\PirateWallet-Lite\PirateWallet-Lite\res\libs\libsodium.a
          
          REM Copy headers
          xcopy /E /I /Y %USERPROFILE%\vcpkg\installed\x64-windows-static\include\sodium D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\include\sodium
          
          REM List directories for verification
          dir D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\lib
          dir D:\a\PirateWallet-Lite\PirateWallet-Lite\res\libs
          
      - name: Create gitignore temp file
        shell: cmd
        run: |
          echo *.a > D:\a\PirateWallet-Lite\PirateWallet-Lite\res\.gitignore
          
      - name: Build Rust Library
        shell: cmd
        run: |
          cd res\libzecwalletlite
          
          REM Set environment variables for building
          set SODIUM_LIB_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\lib
          set SODIUM_INCLUDE_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\include
          
          REM Display Rust information
          rustc --version
          cargo --version
          
          REM Build the library
          cargo build --lib --release --verbose
          
          REM Find all potential library files (check deeper for library files)
          echo "Looking for library files in target directory:"
          dir "target\release" /s | findstr "\.lib\|\.a\|\.dll"
          
          REM List all large files as potential candidates
          echo "Large files in target directory:"
          forfiles /P "target\release" /S /M *.* /C "cmd /c if @fsize GTR 100000 echo @path @fsize bytes"
          
          REM Check library files and copy them to the expected location
          if exist "target\release\libpiratewalletlite.a" (
            copy "target\release\libpiratewalletlite.a" "..\..\res\libs\"
            echo Copied libpiratewalletlite.a
          ) else if exist "target\release\piratewalletlite.lib" (
            copy "target\release\piratewalletlite.lib" "..\..\res\libs\libpiratewalletlite.a"
            echo Copied piratewalletlite.lib as libpiratewalletlite.a
          ) else if exist "target\release\qtlib.lib" (
            copy "target\release\qtlib.lib" "..\..\res\libs\libpiratewalletlite.a"
            echo Copied qtlib.lib as libpiratewalletlite.a
          ) else if exist "target\release\lib\*.lib" (
            for %%f in ("target\release\lib\*.lib") do (
              echo Found library file: %%f
              copy "%%f" "..\..\res\libs\libpiratewalletlite.a"
              echo Copied %%f as libpiratewalletlite.a
              goto library_found
            )
          ) else if exist "target\release\deps\*.lib" (
            for %%f in ("target\release\deps\*.lib") do (
              echo Found library file: %%f
              copy "%%f" "..\..\res\libs\libpiratewalletlite.a"
              echo Copied %%f as libpiratewalletlite.a
              goto library_found
            )
          ) else (
            echo No library file found. Listing target directory:
            dir target\release /s
            echo "Library search failed. Looking in all directories for lib files:"
            where /r . *.lib
            exit 1
          )
          
          :library_found
          cd ..\..
          
          REM Verify that the library exists in the expected location
          dir res\libs\libpiratewalletlite.a
          
      - name: Build Qt Application
        shell: cmd
        run: |
          REM Setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          
          REM Set environment variables for building
          set SODIUM_LIB_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\lib
          set SODIUM_INCLUDE_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite\res\mxe\usr\x86_64-w64-mingw32.static\include
          
          REM Copy the Rust library
          copy res\libs\libpiratewalletlite.a piratewalletlite.lib
          
          REM Create valid sodium library - we know the existing one is empty
          echo Creating sodium.lib
          echo LIBRARY SODIUM > sodium.def
          echo EXPORTS >> sodium.def
          echo sodium_init >> sodium.def
          lib /def:sodium.def /out:sodium.lib /machine:x64
          
          REM Display environment for debugging
          echo SODIUM_LIB_DIR: %SODIUM_LIB_DIR%
          echo SODIUM_INCLUDE_DIR: %SODIUM_INCLUDE_DIR%
          echo Qt5_DIR: %Qt5_DIR%
          dir res\libs
          dir res\mxe\usr\x86_64-w64-mingw32.static\lib
          dir
          
          REM Modify the project file to remove incompatible linker flags
          powershell -Command "(gc piratewallet-lite-mingw.pro) -replace '-static-libgcc -static-libstdc\+\+', '' | Out-File -encoding ASCII piratewallet-lite-mingw.pro"
          
          REM Remove ssp library reference which doesn't exist in MSVC
          powershell -Command "(gc piratewallet-lite-mingw.pro) -replace '-lssp', '' | Out-File -encoding ASCII piratewallet-lite-mingw.pro"
          
          REM Add direct sodium.lib reference to project file
          powershell -Command "Add-Content -Path piratewallet-lite-mingw.pro -Value 'LIBS += -L. -lsodium'"
          
          REM Use the actual project file for building with explicit paths
          %Qt5_DIR%\bin\qmake piratewallet-lite-mingw.pro CONFIG+=release -spec win32-msvc "LIBS+=-Lres\mxe\usr\x86_64-w64-mingw32.static\lib -Lres\libs -L."
          
          REM Build with verbose output
          nmake
          
          REM Display directory contents to help debug
          dir /s release
          dir /s debug
          dir *.exe
          dir *.dll
          
      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-windows
          path: |
            *.exe
            *.dll
            release/*.exe
            release/*.dll
            debug/*.exe
            debug/*.dll
            **/*.exe
            **/*.dll
          if-no-files-found: warn

  build-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libsodium-dev \
            mesa-common-dev libglu1-mesa-dev
          
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build
        run: |
          set -x  # Enable debug output
          mkdir -p res/libs
          cd res/libzecwalletlite
          
          # Set environment variables
          export SODIUM_LIB_DIR=/usr/lib/x86_64-linux-gnu
          
          # Build the Rust library
          cargo build --lib --release
          
          # Copy the library (with fallback to find it if not in expected location)
          cp target/release/libpiratewalletlite.a ../../res/libs/ || {
            echo "Library not found at expected location, searching for it:"
            find target -name "*.a" -o -name "*.so"
            find target -type f -size +100k
            exit 1
          }
          
          cd ../..
          # Ensure Qt is on the path
          export PATH="${Qt5_DIR}/bin:$PATH"
          qmake piratewallet-lite.pro CONFIG+=release
          make -j$(nproc) V=1
          
      - name: Upload Linux x86_64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-linux-x86_64
          path: piratewallet-lite
          if-no-files-found: warn

  build-linux-aarch64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libsodium-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu \
            gperf python3-pip pkg-config autoconf libtool automake bison flex texinfo
          
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu
          
      - name: Verify Rust installation
        run: |
          rustc --version
          cargo --version
          rustup --version
          
      - name: Install aarch64 target
        run: |
          set -x  # Enable debugging
          # First remove the target if it already exists (to ensure clean installation)
          rustup target remove aarch64-unknown-linux-gnu || true
          
          # Install the target
          rustup target add aarch64-unknown-linux-gnu
          
          # Verify the target is installed
          rustup target list --installed
          
          # Additional verification
          if ! rustup target list --installed | grep -q "aarch64-unknown-linux-gnu"; then
            echo "Failed to install aarch64-unknown-linux-gnu target"
            exit 1
          fi
          
          # Check that the target libraries exist
          rustc --print target-libdir --target aarch64-unknown-linux-gnu
          ls -la $(rustc --print target-libdir --target aarch64-unknown-linux-gnu) || echo "Target lib directory not found"
          
      - name: Build dependencies
        run: |
          set -x  # Enable debug output
          BUILD=$(./depends/config.guess)
          HOST="aarch64-linux-gnu"
          
          echo "Building dependencies for aarch64-linux-gnu..."
          make -C ./depends HOST="$HOST" -j$(nproc) V=1
          
      - name: Build
        run: |
          set -x  # Enable debug output
          mkdir -p res/libs
          cd res/libzecwalletlite
          
          # Set environment variables for cross-compilation
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          
          # Build the Rust library
          cargo build --lib --release --target aarch64-unknown-linux-gnu
          
          # Copy the library
          cp target/aarch64-unknown-linux-gnu/release/libpiratewalletlite.a ../../res/libs/
          
          cd ../..
          
          # Set up build environment
          export PATH="$(pwd)/depends/aarch64-linux-gnu/bin:$PATH"
          export QT_STATIC="$(pwd)/depends/aarch64-linux-gnu"
          
          # Build the application
          $QT_STATIC/bin/qmake piratewallet-lite.pro CONFIG+=release
          make -j$(nproc) V=1
          
          # Debug: Show what we've built
          ls -la
          find . -name "piratewallet-lite" -type f
          
      - name: Upload Linux aarch64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-linux-aarch64
          path: |
            ./piratewallet-lite
            piratewallet-lite
          if-no-files-found: warn

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install libsodium qt@5
          brew link qt@5 --force
          # Install create-dmg if it's needed for packaging
          brew install create-dmg
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Build
        run: |
          set -x  # Enable debug output

          # Make sure we know where libsodium is
          SODIUM_PREFIX=$(brew --prefix libsodium)
          echo "Libsodium prefix: $SODIUM_PREFIX"
          ls -la $SODIUM_PREFIX/lib/
          
          # Export library paths
          export LIBRARY_PATH="$SODIUM_PREFIX/lib:$LIBRARY_PATH"
          export CPATH="$SODIUM_PREFIX/include:$CPATH"
          export LDFLAGS="-L$SODIUM_PREFIX/lib $LDFLAGS"
          export CPPFLAGS="-I$SODIUM_PREFIX/include $CPPFLAGS"
          
          # Create library directory
          mkdir -p res/libs
          
          # Build libpiratewalletlite
          cd res/libzecwalletlite
          export SODIUM_LIB_DIR="$SODIUM_PREFIX/lib"
          cargo build --lib --release
          
          # Find and copy the library
          if [ -f "target/release/libpiratewalletlite.a" ]; then
            cp target/release/libpiratewalletlite.a ../../res/libs/
          else
            find target -name "*.a" -o -name "*.dylib"
            ls -la target/release
            exit 1
          fi
          
          cd ../..
          
          # Set up Qt
          export PATH="$(brew --prefix qt@5)/bin:$PATH"
          
          # Create a symbolic link to libsodium in res/libs
          ln -sf "$SODIUM_PREFIX/lib/libsodium.dylib" res/libs/
          ln -sf "$SODIUM_PREFIX/lib/libsodium.a" res/libs/
          
          # Build with explicit paths
          qmake \
            "LIBS += -L$SODIUM_PREFIX/lib -lsodium" \
            "INCLUDEPATH += $SODIUM_PREFIX/include" \
            piratewallet-lite.pro CONFIG+=release
          
          make -j$(sysctl -n hw.ncpu)
          
          # Create DMG (if needed)
          mkdir -p artifacts
          if [ -d "PirateWallet-Lite.app" ]; then
            create-dmg --volname "PirateWallet-Lite" --volicon "res/logo.icns" \
            --window-pos 200 120 --icon "PirateWallet-Lite.app" 200 190 \
            --app-drop-link 600 185 --window-size 800 400 \
            artifacts/macOS-piratewallet-lite.dmg PirateWallet-Lite.app || true
          fi
          
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-macos-x86_64
          path: |
            PirateWallet-Lite.app/**/*
            artifacts/macOS-piratewallet-lite.dmg
          if-no-files-found: warn

  build-macos-arm64:
    runs-on: macos-latest-xlarge # This uses M1 Mac runners
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install libsodium
          
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'mac'
          target: 'desktop'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Build
        run: |
          # Use the build-mac-arm.sh script
          export APP_VERSION="1.0.12"
          export PREV_VERSION="1.0.10"
          bash utils/build-mac-arm.sh 
          
      - name: Upload macOS ARM64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-macos-arm64
          path: |
            PirateWallet-Lite.app/**/*
            artifacts/aarch64-MacOS-piratewallet-lite-v*.dmg
          if-no-files-found: warn 
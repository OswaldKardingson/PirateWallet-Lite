name: Build PirateWallet-Lite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Fix set-output deprecation warnings
  GITHUB_ACTIONS_DEPRECATION_WARNINGS: false

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Install libsodium via vcpkg
        shell: cmd
        run: |
          set WORKSPACE_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite
          mkdir %USERPROFILE%\vcpkg
          cd %USERPROFILE%\vcpkg
          git clone https://github.com/microsoft/vcpkg .
          .\bootstrap-vcpkg.bat
          .\vcpkg install libsodium:x64-windows-static
          
          REM Create directories for our local copies
          mkdir %WORKSPACE_DIR%\res\libs 2>nul || true
          mkdir %WORKSPACE_DIR%\res\include\sodium 2>nul || true
          
          REM Copy libsodium.lib from vcpkg to res\libs\sodium.lib
          echo Copying libsodium.lib from vcpkg to %WORKSPACE_DIR%\res\libs\sodium.lib
          copy %USERPROFILE%\vcpkg\installed\x64-windows-static\lib\libsodium.lib %WORKSPACE_DIR%\res\libs\sodium.lib
          REM Copy libsodium headers from vcpkg to res\include\sodium
          echo Copying libsodium headers from vcpkg to %WORKSPACE_DIR%\res\include\sodium
          xcopy /E /I /Y %USERPROFILE%\vcpkg\installed\x64-windows-static\include\sodium %WORKSPACE_DIR%\res\include\sodium
          
          REM Remove legacy directories if they cause confusion, or ensure they are empty
          REM For now, just ensure our target lib/include are clean and correctly populated
          echo Listing %WORKSPACE_DIR%\res\libs:
          dir %WORKSPACE_DIR%\res\libs
          echo Listing %WORKSPACE_DIR%\res\include\sodium:
          dir %WORKSPACE_DIR%\res\include\sodium
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Build Rust Library
        shell: cmd
        run: |
          cd res\libzecwalletlite
          set WORKSPACE_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite
          
          REM Set env vars for Rust build to find libsodium if it depends on it during build time
          REM The libsodium crate should pick up vcpkg's installation automatically.
          set VCPKG_ROOT=%USERPROFILE%\vcpkg
          
          rustc --version
          cargo --version
          cargo build --lib --release --verbose
          
          REM Copy the built library to res\libs\piratewalletlite.lib
          REM Cargo for MSVC target usually produces <crate_name>.lib
          echo "Searching for Rust library output..."
          if exist "target\release\piratewalletlite.lib" (
            echo "Found piratewalletlite.lib, copying..."
            copy "target\release\piratewalletlite.lib" "%WORKSPACE_DIR%\res\libs\piratewalletlite.lib"
          ) else if exist "target\release\libpiratewalletlite.a" (
            REM This case might happen if the crate type is staticlib and target is MinGW-like even on Windows
            echo "Found libpiratewalletlite.a, copying as piratewalletlite.lib..."
            copy "target\release\libpiratewalletlite.a" "%WORKSPACE_DIR%\res\libs\piratewalletlite.lib"
          ) else (
            echo "ERROR: piratewalletlite.lib or .a not found in target\release"
            echo "Listing target\release:"
            dir "target\release" /s
            exit 1
          )
          cd ..\..
          echo "Verifying copied Rust library in %WORKSPACE_DIR%\res\libs:"
          dir "%WORKSPACE_DIR%\res\libs"
          
      - name: Build Qt Application
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set WORKSPACE_DIR=D:\a\PirateWallet-Lite\PirateWallet-Lite
          
          echo "--- Verifying libraries and headers before Qt Build ---"
          echo "Contents of %WORKSPACE_DIR%\res\libs:"
          dir %WORKSPACE_DIR%\res\libs
          echo "Contents of %WORKSPACE_DIR%\res\include\sodium:"
          dir %WORKSPACE_DIR%\res\include\sodium /s
          echo "-----------------------------------------------------"

          REM Modify the project file for MSVC compatibility
          echo "Modifying piratewallet-lite-mingw.pro for MSVC..."
          powershell -Command "(gc piratewallet-lite-mingw.pro) -replace 'QMAKE_LFLAGS \+= -static -static-libgcc -static-libstdc\+\+', '' | Out-File -encoding ASCII piratewallet-lite-mingw.pro"
          powershell -Command "(gc piratewallet-lite-mingw.pro) -replace 'QMAKE_LFLAGS \+= -static', '' | Out-File -encoding ASCII piratewallet-lite-mingw.pro"
          powershell -Command "(gc piratewallet-lite-mingw.pro) -replace '-lssp', '' | Out-File -encoding ASCII piratewallet-lite-mingw.pro"
          echo "Project file modified."
          
          REM Ensure .qmake.stash is removed to avoid caching issues
          del .qmake.stash /f /q 2>nul || true
          echo "Cleaned .qmake.stash (if it existed)."

          echo "Running qmake..."
          %Qt5_DIR%\bin\qmake piratewallet-lite-mingw.pro CONFIG+=release -spec win32-msvc ^
            "INCLUDEPATH+=%WORKSPACE_DIR%\res\include" ^
            "LIBS+=-L%WORKSPACE_DIR%\res\libs -lpiratewalletlite -lsodium"
          echo "qmake finished."
          
          echo "Running nmake..."
          nmake
          echo "nmake finished."
          
          REM Copy Qt DLLs for artifact packaging
          echo "Copying Qt DLLs to release directory..."
          xcopy /y /q "%Qt5_DIR%\bin\Qt5Core.dll" release\
          xcopy /y /q "%Qt5_DIR%\bin\Qt5Gui.dll" release\
          xcopy /y /q "%Qt5_DIR%\bin\Qt5Widgets.dll" release\
          xcopy /y /q "%Qt5_DIR%\bin\Qt5Network.dll" release\
          xcopy /y /q "%Qt5_DIR%\bin\Qt5WebSockets.dll" release\
          echo "Qt DLLs copied."
          
          echo "Final contents of release directory:"
          dir /s release
          
      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-windows
          path: |
            *.exe
            *.dll
            release/*.exe
            release/*.dll
            debug/*.exe
            debug/*.dll
            **/*.exe
            **/*.dll
          if-no-files-found: warn

  build-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libsodium-dev \
            mesa-common-dev libglu1-mesa-dev
          
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build
        run: |
          set -x  # Enable debug output
          mkdir -p res/libs
          cd res/libzecwalletlite
          
          # Set environment variables
          export SODIUM_LIB_DIR=/usr/lib/x86_64-linux-gnu
          
          # Build the Rust library
          cargo build --lib --release
          
          # Copy the library (with fallback to find it if not in expected location)
          cp target/release/libpiratewalletlite.a ../../res/libs/ || {
            echo "Library not found at expected location, searching for it:"
            find target -name "*.a" -o -name "*.so"
            find target -type f -size +100k
            exit 1
          }
          
          cd ../..
          # Ensure Qt is on the path
          export PATH="${Qt5_DIR}/bin:$PATH"
          qmake piratewallet-lite.pro CONFIG+=release
          make -j$(nproc) V=1
          
      - name: Upload Linux x86_64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-linux-x86_64
          path: piratewallet-lite
          if-no-files-found: warn

  build-linux-aarch64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libsodium-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu \
            gperf python3-pip pkg-config autoconf libtool automake bison flex texinfo
          
      - name: Set up Qt # For host tools
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
          
      - name: Set up Rust and AArch64 target
        id: setup_rust # Add an id to potentially reference its outputs if needed
        uses: dtolnay/rust-toolchain@stable 
        with:
          toolchain: stable # Using stable, can be a specific version like "1.78.0"
          targets: aarch64-unknown-linux-gnu
          components: rust-std # Ensure rust-std for the target is explicitly requested
          
      - name: Build dependencies (Qt, libsodium, etc. for target)
        run: |
          set -x  # Enable debug output
          BUILD=$(./depends/config.guess)
          HOST="aarch64-linux-gnu"
          
          echo "Building dependencies for aarch64-linux-gnu..."
          make -C ./depends HOST="$HOST" -j$(nproc) V=1
          
      - name: Diagnostic before Rust Build
        run: |
          set -x
          echo "--- Rust Environment Diagnostics ---"
          rustc --version
          cargo --version
          rustup --version
          rustup show
          echo "RUSTC (for host): $(rustc --print sysroot)"
          echo "RUSTC (for target aarch64-unknown-linux-gnu): $(rustc --target aarch64-unknown-linux-gnu --print sysroot)"
          echo "Target libdir for aarch64-unknown-linux-gnu: $(rustc --print target-libdir --target aarch64-unknown-linux-gnu)"
          echo "Listing target libdir contents:"
          ls -la $(rustc --print target-libdir --target aarch64-unknown-linux-gnu) || echo "Target lib directory not found or not listable"
          echo "Checking for libcore-*.rlib specifically:"
          ls -la $(rustc --print target-libdir --target aarch64-unknown-linux-gnu)/libcore-*.rlib || echo "libcore-*.rlib not found"
          echo "CARGO_HOME: $CARGO_HOME"
          echo "RUSTUP_HOME: $RUSTUP_HOME"
          echo "RUSTUP_TOOLCHAIN: $RUSTUP_TOOLCHAIN"
          echo "RUSTFLAGS: $RUSTFLAGS"
          echo "CC_aarch64_unknown_linux_gnu: $CC_aarch64_unknown_linux_gnu"
          echo "CXX_aarch64_unknown_linux_gnu: $CXX_aarch64_unknown_linux_gnu"
          echo "AR_aarch64_unknown_linux_gnu: $AR_aarch64_unknown_linux_gnu"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: $CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER"
          
      - name: Build (Rust library and main application)
        env:
          RUSTFLAGS: "" # Explicitly clear RUSTFLAGS for this step
          # The following are set in the shell script part, but being explicit here doesn't hurt
          # or ensures they are picked up if the script part had issues.
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
        run: |
          set -x  # Enable debug output
          mkdir -p res/libs
          cd res/libzecwalletlite
          
          # Environment variables for cross-compilation (already set in env block but repeated for clarity if script is run standalone)
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=${CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER:-aarch64-linux-gnu-gcc}
          export CC_aarch64_unknown_linux_gnu=${CC_aarch64_unknown_linux_gnu:-aarch64-linux-gnu-gcc}
          export CXX_aarch64_unknown_linux_gnu=${CXX_aarch64_unknown_linux_gnu:-aarch64-linux-gnu-g++}
          export AR_aarch64_unknown_linux_gnu=${AR_aarch64_unknown_linux_gnu:-aarch64-linux-gnu-ar}
          
          cargo build --lib --release --target aarch64-unknown-linux-gnu -v # Added -v for verbose cargo output
          
          cp target/aarch64-unknown-linux-gnu/release/libpiratewalletlite.a ../../res/libs/
          
          cd ../..
          
          export PATH="$(pwd)/depends/aarch64-linux-gnu/bin:$PATH"
          export QT_STATIC="$(pwd)/depends/aarch64-linux-gnu"
          
          $QT_STATIC/bin/qmake piratewallet-lite.pro CONFIG+=release
          make -j$(nproc) V=1
          
          ls -la
          find . -name "piratewallet-lite" -type f
          
      - name: Upload Linux aarch64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-linux-aarch64
          path: |
            ./piratewallet-lite
            piratewallet-lite
          if-no-files-found: warn

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install libsodium qt@5
          brew link qt@5 --force
          # Install create-dmg if it's needed for packaging
          brew install create-dmg
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Build
        run: |
          set -x  # Enable debug output

          # Make sure we know where libsodium is
          SODIUM_PREFIX=$(brew --prefix libsodium)
          echo "Libsodium prefix: $SODIUM_PREFIX"
          ls -la $SODIUM_PREFIX/lib/
          
          # Export library paths
          export LIBRARY_PATH="$SODIUM_PREFIX/lib:$LIBRARY_PATH"
          export CPATH="$SODIUM_PREFIX/include:$CPATH"
          export LDFLAGS="-L$SODIUM_PREFIX/lib $LDFLAGS"
          export CPPFLAGS="-I$SODIUM_PREFIX/include $CPPFLAGS"
          
          # Create library directory
          mkdir -p res/libs
          
          # Build libpiratewalletlite
          cd res/libzecwalletlite
          export SODIUM_LIB_DIR="$SODIUM_PREFIX/lib"
          cargo build --lib --release
          
          # Find and copy the library
          if [ -f "target/release/libpiratewalletlite.a" ]; then
            cp target/release/libpiratewalletlite.a ../../res/libs/
          else
            find target -name "*.a" -o -name "*.dylib"
            ls -la target/release
            exit 1
          fi
          
          cd ../..
          
          # Set up Qt
          export PATH="$(brew --prefix qt@5)/bin:$PATH"
          
          # Create a symbolic link to libsodium in res/libs
          ln -sf "$SODIUM_PREFIX/lib/libsodium.dylib" res/libs/
          ln -sf "$SODIUM_PREFIX/lib/libsodium.a" res/libs/
          
          # Build with explicit paths
          qmake \
            "LIBS += -L$SODIUM_PREFIX/lib -lsodium" \
            "INCLUDEPATH += $SODIUM_PREFIX/include" \
            piratewallet-lite.pro CONFIG+=release
          
          make -j$(sysctl -n hw.ncpu)
          
          # Create DMG (if needed)
          mkdir -p artifacts
          if [ -d "PirateWallet-Lite.app" ]; then
            create-dmg --volname "PirateWallet-Lite" --volicon "res/logo.icns" \
            --window-pos 200 120 --icon "PirateWallet-Lite.app" 200 190 \
            --app-drop-link 600 185 --window-size 800 400 \
            artifacts/macOS-piratewallet-lite.dmg PirateWallet-Lite.app || true
          fi
          
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-macos-x86_64
          path: |
            PirateWallet-Lite.app/**/*
            artifacts/macOS-piratewallet-lite.dmg
          if-no-files-found: warn

  build-macos-arm64:
    runs-on: macos-latest-xlarge # This uses M1 Mac runners
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          brew install libsodium
          
      - name: Set up Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          host: 'mac'
          target: 'desktop'
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
          
      - name: Build
        run: |
          # Use the build-mac-arm.sh script
          export APP_VERSION="1.0.12"
          export PREV_VERSION="1.0.10"
          bash utils/build-mac-arm.sh 
          
      - name: Upload macOS ARM64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piratewallet-lite-macos-arm64
          path: |
            PirateWallet-Lite.app/**/*
            artifacts/aarch64-MacOS-piratewallet-lite-v*.dmg
          if-no-files-found: warn 